{"remainingRequest":"/Users/carol/Documents/hacker/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/carol/Documents/hacker/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/carol/Documents/hacker/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/carol/Documents/hacker/src/views/Projects.vue?vue&type=template&id=6cfeddb4&","dependencies":[{"path":"/Users/carol/Documents/hacker/src/views/Projects.vue","mtime":1690100743309},{"path":"/Users/carol/Documents/hacker/node_modules/cache-loader/dist/cjs.js","mtime":1617010042632},{"path":"/Users/carol/Documents/hacker/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1617010052190},{"path":"/Users/carol/Documents/hacker/node_modules/cache-loader/dist/cjs.js","mtime":1617010042632},{"path":"/Users/carol/Documents/hacker/node_modules/vue-loader/lib/index.js","mtime":1617010052190}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}